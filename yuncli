#!/usr/bin/env ruby
# encoding: utf-8
#Description:

require 'net/http'
require 'uri'
require 'json'
require 'readline'
require 'logger'
require 'shellwords'
require 'digest'
require 'pathname'
require 'typhoeus' rescue puts "Typhoeus not found, fallback to Net::HTTP methods."

APP_NAME         = 'bypy'
APP_ROOT_DIR     = File.join("/apps/", APP_NAME)
API_KEY          = 'q8WE4EpCsau1oS0MplgMKNBn'
AUTH_API_URL     = "https://openapi.baidu.com/oauth/2.0/authorize"
AUTH_SERV        = 'https://bypy-tianze.rhcloud.com/auth'
SESSION_FILE     = File.expand_path('~/.baiduyun')
SESSION_LOG      = File.expand_path("~/.baiduyun.log")
PCS_BASE_URI     = 'https://pcs.baidu.com/rest/2.0/pcs/'
BAIDU_USER_AGENT = 'netdisk;4.6.4.1;PC;PC-Windows;6.3.9600;WindowsBaiduYunGuanJia'
PCS_PREFIX       = '/rest/2.0/pcs/'
PCS_METHODS      = {
  :quota_info                      => :get,
  :file_upload                     => :post,
  :file_download                   => :get,
  :file_createsuperfile            => :post,
  :file_mkdir                      => :post,
  :file_meta                       => :get,
  :file_list                       => :get,
  :file_move                       => :post,
  :file_copy                       => :post,
  :file_delete                     => :post,
  :file_search                     => :get,
  :file_diff                       => :get,
  :file_streaming                  => :get,
  :file_rapidupload                => :post,
  :thunmbnail_generate             => :get,
  :"services/cloud_dl|list_task"   => :post,
  :"services/cloud_dl|query_task"  => :post,
  :"services/cloud_dl|add_task"    => :post,
  :"services/cloud_dl|cancel_task" => :post,
}

module TyphoeusConnection
  def server(uri = nil)
    return @server unless uri
    @server = uri.start_with?('http') ? uri : ("https://" + uri)
    @server = @server[%r{https://[^/]+}]
    puts "当前服务器: #{@server}"
    @server
  end

  def request(uri, detail = {})
    request = Typhoeus::Request.new uri, detail
    yield(request)  if block_given?
    request.run
    request.response
  end

  def download(full_path, filename)
    run(:file_download, path: full_path) do |request|
      f = File.open(filename, 'wb')
      request.on_headers  {|resp| handle_download_errors(resp.code) }
      request.on_body     {|chunk| f.write(chunk) }
      request.on_complete {|resp| f.close}
    end
    [true, :ok]
  end
end   if defined? Typhoeus

module NetHTTPConnection
  def server(server_uri = nil)
    return @server unless server_uri
    server_uri = "https://" + server_uri  unless server_uri.start_with? 'http'
    @server = server_uri[%r{https://[^/]+}]
    u       = URI(@server)
    @http   = Net::HTTP.new(u.host, u.port)
    @http.use_ssl = true
    puts "当前服务器: #{@server}"
    @server
  end

  # uri:
  #   /foo/bar    partial uri, method will continue to use @http set with
  #               BaiduYunConn#server method
  #   htt://foo   a full uri. @http will be reset by invoking #server method
  #
  # detail:
  #   :method     request method GET/POST/ETC     default :get
  #   :params     query data
  #   :body       request data to be embeded in request body, ie. post form
  #   :headers    request header string
  def request(uri, detail = {}, &block)
    unless request_to_baidu?
      uri = server(uri).request_uri   # create @http to match uri
    else
      uri = URI(uri).request_uri
    end
    header = detail.fetch(:headers, {})
    body   = detail.fetch(:body, {})
    params = detail.fetch(:params, {})
    request = {
      :get  => Net::HTTP::Get,
      :post => Net::HTTP::Post,
    }[detail[:method]].new( full_uri(uri, params ) )
    if body[:file]
      request.body, content_type = encode_body(body, params)
      header['Content-Type'] = content_type
    else
      request.form_data = body
    end
    request.initialize_http_header(header)
    block_given? ? @http.request(request, &block) : @http.request(request)
  end

  def download(full_path, filename)
    run(:file_download, path: full_path) do |resp|
      handle_download_errors(resp.code)
      open(filename, 'wb') { |f| resp.read_body {|segment| f << segment; sleep 0.005 } }
    end
    [ true, :ok ]
  end

  private
  def encode_body(body, params)
    boundary = 'AaB0xXx'
    body = body.map{|k, v|
      k == :file ? \
        file_to_multipart(k, File.basename(params[:path]),
                          'application/octet-stream', body[k].read)
        : text_to_multipart(k, body[k])
    }.map{|p| '--' + boundary + "\r\n" + p }.join
    body << "--" + boundary + "--\r\n"
    [ body, "multipart/form-data; boundary=#{boundary}" ]
  end

  def text_to_multipart(key,value)
    "Content-Disposition: form-data; name=\"#{key}\"\r\n\r\n#{value}\r\n"
  end

  def file_to_multipart(key,filename,mime_type,content)
    "Content-Disposition: form-data; name=\"#{key}\"; filename=\"#{filename}\"\r\n" +
      "Content-Transfer-Encoding: binary\r\n" +
      "Content-Type: #{mime_type}\r\n\r\n" +
      "#{content}\r\n"
  end
end

# This class defines connectivity level stuff
class BaiduYunConn
  attr_accessor :logger
  include defined?(Typhoeus) ? TyphoeusConnection : NetHTTPConnection

  def initialize
    server PCS_BASE_URI
  end

  def authenticate
    params = {
      client_id:     API_KEY,
      response_type: 'code',
      redirect_uri:  'oob',
      scope:         'basic netdisk'
    }
    auth_url = AUTH_API_URL + '?' + URI.encode_www_form(params)
    puts "请访问以下网址并复制验证token: "
    puts; puts auth_url; puts
    print "请输入验证token并按 ENTER 继续: "

    res = request_json(AUTH_SERV, :get,
                       params: {code: STDIN.gets.chomp, redirect_uri: 'oob'})

    save_session(res)

    @token = res[:access_token]
  end

  def run(cmd, params = {}, body = {}, &block)
    uri, detail = cmd_to_url(cmd, params, body)

    block_given? ?  request(uri, detail, &block) : request_json(uri, detail)
  end

  def cmd_to_url(cmd, params = {}, body = {})
    authenticate_first      # without this, there is no @token
    params[:access_token] = @token
    service, method = split_command(cmd.to_s)

    [:path, :from, :to].each {|k| params[k] = full_path(params[k])   if params.key? k }

    args = params.merge(:method => method, :request => PCS_METHODS[cmd.to_sym] || :get )

    request_info(PCS_PREFIX + service, args, body)
  end

  def authenticate_first
    unless @token or load_session
      authenticate
      server PCS_BASE_URI
    end
  end

  def full_uri(base_uri, params)
    params.empty? ? base_uri : ( base_uri + '?' + URI.encode_www_form(params) )
  end

  private

  def handle_download_errors(code)
    case code.to_i
    when 400,401,404;   raise "文件名错误"
    when 302;           raise '文件已被墙'
    end
  end

  def request_to_baidu?
    server =~ /\.(baidu|baidupcs)\.com/
  end

  def split_command(cmd)
    cmd.include?('|') ? cmd.split('|') : cmd.split('_')
  end

  def load_session
    if File.file? SESSION_FILE
      session = JSON.parse(open(SESSION_FILE, 'r').read, :symbolize_names => true)
      @token = session[:access_token]
      log.info "Token loaded: #{@token}"
    end
    @token
  rescue
    log.fatal "Error loading token from #{SESSION_FILE}"
    exit 1
  end

  def save_session(session_detail)
    log.info "Session saved to #{SESSION_FILE}"
    open(SESSION_FILE, 'w') {|f| f.puts session_detail.to_json }
  end

  def log
    @logger ||= Logger.new(STDOUT)
  end

  def full_path(path)
    path = File.expand_path(File.join(APP_ROOT_DIR, path))   unless path.start_with? '/'
    path
  end

  def request_json(uri, details = {})
    response = request(uri, details)
    body = response.body
    res = JSON.parse(body, :symbolize_names => true)
    logger.info(:RESPONSE) { res.inspect }
    res
  rescue JSON::ParserError
    body
  end

  def request_info(uri, params = {}, body = {})
    method = params.delete(:request) || :get
    uri    = URI.join(server, uri).to_s unless uri.start_with? 'http'
    header = request_to_baidu? ? {'User-Agent' => BAIDU_USER_AGENT } : { }

    log.info(method) { uri }
    log.info(method) { "PARAMS: #{params}" }
    log.info(method) { "BODY: #{body.inspect}" }  unless body.empty? or body.key? :file

    [uri, {method: method, params: params, body: body, headers: header}]
  end

end

# API level stuff defined here
class BaiduYun
  def initialize
    @api   = BaiduYunConn.new
    @pwd   = APP_ROOT_DIR
    @lpwd  = ENV['PWD']
    @files = {}           # file listing cache for completion and etc
    debug( ENV['DEBUG'] ? 'on' : 'off' )
  end

  def cd(path = nil)
    path = absolute_path(path || APP_ROOT_DIR, @pwd)
    # going above root dir is not allowed
    @pwd = path >= APP_ROOT_DIR ? path : APP_ROOT_DIR
  end

  def cp(from, to)
    api_run(:file_copy, :from => absolute_path(from), :to => absolute_path(to))
  end

  def lcd(path)
    npath = File.expand_path(path)
    if File.directory? npath
      @lpwd = npath
    else
      raise "无效的路径"
    end
  end

  #  API found here, no doc anywhere ....
  #  https://github.com/ly0/baidupcsapi/blob/master/baidupcsapi/api.py
  def servers
    api_run(:file_locateupload)
  end

  def server
    @api.server
  end

  def ls(path = nil)
    path = path || relative_path
    api_run(:file_list, :path => path)
    if success?
      full_path = absolute_path(path, APP_ROOT_DIR)
      @files[full_path] = @res[:list].map{|i| [ File.basename(i[:path]), i[:isdir] == 1 ] }
    end
  end

  alias :_ls :ls

  def pwd
    [ @pwd, @lpwd ]
  end

  def quota
    api_run(:quota_info)
  end

  def rm(*path)
    api_run(:file_delete,
            { },
            { :param => {:list => path.map{|f| {:path => absolute_path(f) }}}.to_json }  )
  end

  def put(file)
    fn = File.basename(file)
    local_file = absolute_path(file, @lpwd)
    remote_file = absolute_path(fn)
    file_size = File.size(local_file)
    if file_size > 262144     # > 256K try rapidupload first
      api_run(:file_rapidupload,
              :path             => remote_file,
              :"content-length" => file_size,
              :"content-md5"    => `md5sum -b #{local_file}`.split(" ").first,
              :"content-crc32"  => `crc32 #{local_file}`.chomp,
              :"slice-md5"      => Digest::MD5.hexdigest( IO.read(local_file, 262144) )
             )
      return if success?
    end
    # Carveat, in body params, pass read() to a file handler could cause problem
    api_run(:file_upload,
            { path: remote_file, ondup: 'overwrite' },
            { file: open(local_file) })
  end

  def find(wd, path = '.')
    api_run(:file_search, path: path, wd: wd, re: "1")
  end

  def get(path)
    fn = File.basename(path)
    #http://stackoverflow.com/questions/2263540/how-do-i-download-a-binary-file-over-http
    @api.download(absolute_path(path), File.join(@lpwd, fn))
  rescue => e
    [false, e.to_s ]
  end

  # get download url for a file
  def url(path)
    uri, details = @api.cmd_to_url(:file_download, path: absolute_path(path))
    @api.full_uri(uri, details[:params])
  end

  def meta(path)
    api_run(:file_meta, path: absolute_path(path))
  end

  def mget(pattern)
    _ls unless files
    matches = files.select{|f,dir| File.fnmatch(pattern, f) and not dir }.map(&:first)
    # download one by one as I am poor man
    matches.each { |f| get(f) }
  end

  def mput(pattern)
    matches = Dir[absolute_path(pattern, @lpwd)].select{|f| File.file? f }
    matches.each {|f| put f }
  end

  def mrm(pattern)
    _ls unless files
    matches = files.select{|f,dir| File.fnmatch(pattern, f) }.map(&:first)
    rm(*matches)  unless matches.empty?
  end

  def mkdir(path)
    api_run(:file_mkdir, path: absolute_path(path))
  end

  def mv(src, des)
    api_run(:file_move, from: absolute_path(src), to: absolute_path(des))
  end

  def debug(status = nil)
    @debug = status.nil? ? ( not @debug ) : status.to_s == 'on'
    @api.logger = Logger.new( @debug ? STDOUT : "/dev/null" )
    @debug
  end

  def dl
    api_run("services/cloud_dl|list_task")
  end

  def da(url)
    api_run("services/cloud_dl|add_task",
            source_url: url,
            save_path: @pwd )
  end

  private

  # for joining files, might be useful SOMEDAY
  def join(path, *src_files)
    block_list = src_files.map{|f|
      res = api_run(:file_meta, path: absolute_path(f))
      JSON.parse res[:list].first[:block_list]
    }.flatten
    api_run :file_createsuperfile,
            { path: absolute_path(path) },
            { param: { block_list: block_list }.to_json }
  end

  def files
    @files.fetch(@pwd, nil)
  end

  # the block here will be passed all the way down to the respond object
  #
  def api_run(method, *opts, **kwds, &block)
    @res = @api.run(method, *opts, **kwds, &block)
  end

  # find path relative to "to" address
  def relative_path(path = @pwd, to = APP_ROOT_DIR)
    Pathname.new(path).relative_path_from(Pathname.new(to)).to_s
  end

  # find a full path
  #   path:       a relative path or full path
  #   reference:  reference location, i.e., pwd
  def absolute_path(path, reference = @pwd)
    path = File.expand_path(File.join(reference, path))  unless path.start_with? '/'
    path
  end

  def on_success
    success? ?  yield : puts("Error: [#{@res[:error_code]}] #{@res[:error_msg]}")
  end

  def success?
    not @res.key?(:error_code)
  end

end

# This class defines CLI interactions
class BaiduYunCLI < BaiduYun
  HELPDOC = <<-HELPDOC
    help          显示本帮助
    auto_server   自动选择最快的服务器
    cd            更改服务器目录
    cp OLD NEW    在服务器复制文件
    debug on      打开debug显示
    da URL        添加离线下载
    dl            查看离线下载列表
    find FILE     递归在当前目录查找文件
    get FILE      下载单个文件
    url FILE      打印单个文件的下载链接
    history       历史命令
    lcd           切换本地目录
    ls [DIR]      列出文件列表
    mget PATTERN  批量下载(单线程)
    mkdir PATH    建立一个目录
    mput PATTERN  批量上传(单线程)
    mrm PATTERN   批量删除
    mv FILE FILE  重命名一个文件或目录
    pwd           当前目录
    put FILE      上传单个文件
    quota         容量使用信息
    rm FILE...    删除文件
    server        显示当前使用的服务器
    servers       显示可以使用的服务器列表
    quit          退出
  HELPDOC

  def initialize
    super
    @stty_save = `stty -g`.chomp
    #trap("INT") {system('stty', @stty_save); exit}   # trap ^C and gracefully exit
    trap("INT", 'SIG_IGN')    # trap ^C and return back to loop

    @comp = proc {|s|
      # complete command if there is no command entered
      unless Readline.line_buffer =~ /^(.*?) /
        cli_commands.grep(/^#{Regexp.escape(s)}/i)
      else
        selected = \
          case $1
          when /^(cp|mv|get|rm|url|meta)/
            files.map(&:first).grep(/^#{Regexp.escape(s)}/i) if files
          when /^(cd|ls)/
            files.select(&:last).map(&:first).grep(/^#{Regexp.escape(s)}/i) if files
          when /^(put)/
            Dir["#{@lpwd}/#{s}*"].select{|i| File.file? i}.map{|i| File.basename(i)}
          end || [ ]
        selected.map{|i| Shellwords.escape i }
      end
    }
  end

  def main_loop
    load_history
    Readline.completion_proc = @comp
    while @line = Readline.readline(prompt, true)
      dispatch_command(@line)
      # remove empty or dupicated commands
      save_history
    end
  rescue => e
    case e
    when Interrupt;     puts "Interrupted... quitting"; quit
    when ArgumentError; puts "无效的参数";              retry
    when RuntimeError;  puts e;                         retry
    end
  end

  def quit
    system('stty', @stty_save); exit
  end

  def help
    items        = HELPDOC.split("\n")
    longest      = items.max_by{|i| i.width }.width
    screen_width = `tput cols`.to_i
    max_per_line = screen_width / ( longest + 1 )
    leftover     = screen_width - longest * max_per_line
    padding      = leftover / max_per_line
    i = 0
    puts
    while i < items.size
      print items[i] + ' ' * (padding + longest - items[i].width)
      puts if (i += 1) % max_per_line == 0
    end
    puts
  end

  def ls(path = nil)
    super; on_success{  format_list_output(@res)  }
  end

  def lcd(path)
    super; puts "LOCAL: #{@lpwd}"
  end

  def pwd
    puts "REMOTE: " + @pwd
    puts "LOCAL:  " + @lpwd
  end

  def quota
    super
    on_success do
      puts "QUOTA:  #{format_size @res[:quota] }"
      puts "USED:   #{format_size @res[:used] }"
    end
  end

  def meta(path)
    super
    on_success do
      basics = @res.delete(:list).first
      @res.delete(:request_id)
      @res.merge(basics).each { |k,v| puts "#{"%12s" % k} : #{v}" }
    end
  end

  def mv(src, desc)
    super
    on_success do
      @res[:extra][:list].each { |i| puts "MOVE: " +  i[:from] + "  ->  " + i[:to] }
    end
  end

  def cp(from, to)
    super
    on_success do
      @res[:extra][:list].each { |i| puts "COPY: " +  i[:from] + "  =>  " + i[:to] }
    end
  end

  def get(path)
    success, reason = super
    # on_success could not be used here because there is no return code
    puts( success ?  "下载完成: #{path}" : "下载失败: #{reason}" )
  end

  def url(path)
    puts super
  end

  # here the batch delete API is used for speed
  def rm(*path)
    super; on_success{ nil }
  end

  def find(wd, path = '.')
    super; on_success{ format_list_output(@res) }
  end

  def history
    puts Readline::HISTORY.to_a.last(10).join("\n")
  end

  def server
    puts super
  end

  def servers
    super
    on_success{ @res[:server].each{|s| puts s == @res[:host] ? s + "\t(最快)" : s } }
  end

  def auto_server
    # an ugly way to call a super method that is overridden
    super_method(:servers).call
    on_success{ @api.server @res[:host] }
  end

  private

  def cli_commands
    return @commands  if @commands
    @commands = [BaiduYun, BaiduYunCLI].
      map{|i| i.instance_methods(false)}.inject(&:+).map(&:to_s).sort.uniq
    @commands.delete('main_loop')
    @commands.delete_if{|i| i.start_with? '_' }
    @commands
  end

  def super_method(method)
    BaiduYun.instance_method(method).bind(self)
  end

  def save_history
    if @line =~ /^\s*$/ or Readline::HISTORY.to_a[-2] == @line
      Readline::HISTORY.pop
    else
      open(SESSION_LOG, 'a+') {|f| f.puts @line }
    end
  end

  def load_history
    Readline::HISTORY.push(* open(SESSION_LOG).readlines.map(&:chomp).uniq )   if File.file? SESSION_LOG
  end

  def dispatch_command(string)
    case string.strip
    when /^([^ ]+)(?:\s+([^ ].*))?$/i;
      if methods.include? $1.to_sym
        $2 ? send($1, *(Shellwords.split($2))) : send($1)
      else
        puts "无效的命令"
      end
    when ''; nil
    else; puts "无效的命令"
    end
  end

  def prompt
    "BaiduYun".color("34;47") + ' ' + @pwd.color('32;1')  +' > '
  end

  def format_list_output(res)
    res[:list].each do |f|
      str = [:fs_id, :size, :mtime].map{|k| format_field(k, f[k]) }.join("  ")
      str << "  " << format_path(f[:path], f[:isdir])
      puts str
    end
  end

  def format_field(field, record)
    send("format_#{field}", record)
  end

  def format_fs_id(record)
    "%16s" % record
  end

  def format_mtime(record)
    t = Time.at(record)
    '['.color('33') + t.strftime("%Y-%m-%d").color('32') + ' ' +
      t.strftime("%H:%M:%S").color('35') + "]".color('33')
  end

  def format_size(size)
    s = case size
        when  0..1024;               size.to_s
        when  1024..1024000;         "%.2f" % (size/1E3) + 'K'
        when  1024000..1024000000;   "%.2f" % (size/1E6) + 'M'
        else;                        "%.2f" % (size/1E9) + 'G'
        end
    "%8s" % s
  end

  def format_path(record, isdir = 0)
    path = relative_path(record, @pwd)
    isdir == 0 ? path : path.color('34;1;4')
  end

end

class String
  def color(code)
    "\e[#{code}m" + self + "\e[m"
  end

  def contains_cjk?               # Oniguruma regex !!!
    (self =~ /\p{Han}|\p{Katakana}|\p{Hiragana}\p{Hangul}/)
  end

  def width
    gsub(/(\e|\033|\33)\[[;0-9]*\D/,'').split(//).inject( 0 ) do |s, i|
      s += i.contains_cjk? ? 2 : 1
    end
  end
end

if __FILE__ == $0
  cli = BaiduYunCLI.new
  if ARGV.empty?
    cli.main_loop
  else
    cli.send(*ARGV) rescue puts '无效的命令'
  end
end
