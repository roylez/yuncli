#!/usr/bin/env ruby
# encoding: utf-8
#Description:

require 'net/http'
require 'uri'
require 'json'
require 'readline'
require 'logger'
require 'shellwords'
require 'pathname'
require 'typhoeus' rescue STDERR.puts "Typhoeus not found, downloading of big files will fail."
#require 'pry-byebug'

APP_NAME     = 'bypy'
APP_ROOT_DIR = File.join("/apps/", APP_NAME)
API_KEY      = 'q8WE4EpCsau1oS0MplgMKNBn'
AUTH_API_URL = "https://openapi.baidu.com/oauth/2.0/authorize"
AUTH_SERV    = 'https://bypy-tianze.rhcloud.com/auth'
SESSION_FILE = File.expand_path('~/.baiduyun')
SESSION_LOG  = File.expand_path("~/.baiduyun.log")
PCS_BASE_URI = 'https://pcs.baidu.com/rest/2.0/pcs/'
PCS_PREFIX   = '/rest/2.0/pcs/'
PCS_METHODS = {
  :quota_info                      => :get,
  :file_upload                     => :post,
  :file_download                   => :get,
  :file_createsuperfile            => :post,
  :file_mkdir                      => :post,
  :file_meta                       => :get,
  :file_list                       => :get,
  :file_move                       => :post,
  :file_copy                       => :post,
  :file_delete                     => :post,
  :file_search                     => :get,
  :file_diff                       => :get,
  :file_streaming                  => :get,
  :thunmbnail_generate             => :get,
  :"services/cloud_dl|list_task"   => :post,
  :"services/cloud_dl|query_task"  => :post,
  :"services/cloud_dl|add_task"    => :post,
  :"services/cloud_dl|cancel_task" => :post,
}

module TyphoeusConnection
  def server(uri = nil)
    return @server unless uri
    @server = uri.start_with?('http') ? uri : ("https://" + uri)
    @server = @server[%r{https://[^/]+}]
    log.info "Server set to: #{@server}"
    @server
  end

  def request(uri, params = {}, body = {})
    request_method = params.delete(:request) || :get
    log.info(request_method) { uri }
    log.info(request_method) { "PARAMS: #{params}" }
    log.info(request_method) { "FORM: #{body}" } unless body.empty?

    uri = server + '/' + uri unless uri.start_with? 'http'
    request = Typhoeus::Request.new uri,
                                    method: request_method,
                                    params: params,
                                    body:   body
    request.run
    request.response
  end
end   if defined? Typhoeus

module NetHTTPConnection
  def server(server_uri = nil)
    return @server unless server_uri
    server_uri = "https://" + server_uri  unless server_uri.start_with? 'http'
    @server = URI(server_uri)
    @http = Net::HTTP.new(@server.host, @server.port)
    @http.use_ssl = true
    log.info "Server set to: #{@server.host}"
    @server
  end

  # uri:
  #   /foo/bar    partial uri, method will continue to use @http set with
  #               BaiduYunConn#server method
  #   htt://foo   a full uri. @http will be reset by invoking #server method
  #
  # params:
  #   :request    request method GET/POST/ETC     default :get
  #   :params     query data
  #   :body       request data to be embeded in request body, ie. post form
  def request(uri, params = {}, body = {})
    request_method = params.delete(:request) || :get
    log.info(request_method) { uri }
    log.info(request_method) { "PARAMS: #{params}" }
    if uri.start_with? 'http'
      uri = server(uri).request_uri   # create @http to match uri
    end
    case request_method
    when :get
      request_uri = full_uri(uri, params)
      request     = Net::HTTP::Get.new(request_uri)
    when :post
      request_uri       = full_uri(uri, params)
      request           = Net::HTTP::Post.new(request_uri)
      request.form_data = body
      log.info(:post) { "FORM: #{body}"}
    end
    @http.request(request)
  end

  private

  def full_uri(base_uri, params)
    params.empty? ? base_uri : ( base_uri + '?' + URI.encode_www_form(params) )
  end

end

# This class defines connectivity level stuff
class BaiduYunConn
  attr_accessor :logger
  include defined?(Typhoeus) ? TyphoeusConnection : NetHTTPConnection

  def initialize
    server PCS_BASE_URI
  end

  def authenticate
    params = {
      client_id:     API_KEY,
      response_type: 'code',
      redirect_uri:  'oob',
      scope:         'basic netdisk'
    }
    auth_url = AUTH_API_URL + '?' + URI.encode_www_form(params)
    puts "Please visit the following address and copy authentication token:"
    puts; puts auth_url; puts
    print "Please enter token and press ENTER: "

    res = request_json(AUTH_SERV, code: STDIN.gets.chomp, redirect_uri: 'oob')

    save_session(res)

    @token = res[:access_token]
  end

  def run(cmd, params = {}, body = {})
    authenticate_first
    params[:access_token] = @token
    service, method = split_command(cmd.to_s)

    [:path, :from, :to].each {|k| params[k] = full_path(params[k])   if params.key? k }

    args = params.merge(:method => method, :request => PCS_METHODS[cmd.to_sym] || :get )

    request_json(PCS_PREFIX + service, args, body )
  end

  def authenticate_first
    unless @token or load_session
      authenticate
      server PCS_BASE_URI
    end
  end

  # PCS functions starts here...
  def method_missing(method, *opts, **kwds)
    send(:run, method, *opts, **kwds)
  end

  private

  def split_command(cmd)
    cmd.include?('|') ? cmd.split('|') : cmd.split('_')
  end

  def load_session
    if File.file? SESSION_FILE
      session = JSON.parse(open(SESSION_FILE, 'r').read, :symbolize_names => true)
      @token = session[:access_token]
      log.info "Token loaded: #{@token}"
    end
    @token
  rescue
    log.fatal "Error loading token from #{SESSION_FILE}"
    exit 1
  end

  def save_session(session_detail)
    log.info "Session saved to #{SESSION_FILE}"
    open(SESSION_FILE, 'w') {|f| f.puts session_detail.to_json }
  end

  def log; @logger ||= Logger.new(STDOUT); end

  def full_path(path)
    path = File.expand_path(File.join(APP_ROOT_DIR, path))   unless path.start_with? '/'
    path
  end

  def request_json(uri, params = {}, body = {})
    req  = request(uri, params, body)
    body = req.body
    log.info(:RESPONSE) { params[:method] == 'download' ? "-- FILE CONTENT --" : body }
    JSON.parse(body, :symbolize_names => true)
  rescue JSON::ParserError
    body
  end

end

# API level stuff defined here
class BaiduYun
  def initialize
    @api   = BaiduYunConn.new
    @pwd   = APP_ROOT_DIR
    @lpwd  = ENV['PWD']
    @files = {}           # file listing cache for completion and etc
  end

  def cd(path = nil)
    path = absolute_path(path || APP_ROOT_DIR, @pwd)
    # going above root dir is not allowed
    @pwd = path >= APP_ROOT_DIR ? path : APP_ROOT_DIR
  end

  def cp(from, to)
    api_run(:file_copy, :from => absolute_path(from), :to => absolute_path(to))
  end

  def lcd(path); @lpwd = File.expand_path(path) ; end

  #  API found here, no doc anywhere ....
  #  https://github.com/ly0/baidupcsapi/blob/master/baidupcsapi/api.py
  def servers; api_run(:file_locateupload); end

  def server; @api.server; end

  def ls(path = nil)
    path = path || relative_path
    api_run(:file_list, :path => path)
    on_success do
      full_path = absolute_path(path, APP_ROOT_DIR)
      @files[full_path] = @res[:list].map{|i| [ File.basename(i[:path]), i[:isdir] == 1 ] }
    end
  end
  alias :_ls :ls

  def pwd; [ @pwd, @lpwd ] ; end

  def quota; api_run(:quota_info); end

  def rm(*path)
    api_run(:file_delete,
            { },
            { :param => {:list => path.map{|f| {:path => absolute_path(f) }}}.to_json }  )
  end

  def find(wd, path = '.')
    api_run(:file_search, path: path, wd: wd, re: "1")
  end

  def get(path)
    fn     = File.basename(path)
    f      = open(File.join(@lpwd, fn), 'wb')
    f.sync = true
    #http://stackoverflow.com/questions/2263540/how-do-i-download-a-binary-file-over-http
    api_run(:file_download, path: absolute_path(path)) do |resp|
      resp.read_body {|segment| f << segment; sleep 0.005 }
    end
    f.close
  end

  def mget(pattern)
    _ls unless files
    matches = files.select{|f,dir| File.fnmatch(pattern, f) and not dir }.map(&:first)
    # download one by one as I am poor man
    matches.each { |f| get(f) }
  end

  def debug(status = 'on')
    @debug = ( status.downcase == 'on' )
    @api.logger = Logger.new( @debug ? STDOUT : "/dev/null" )
  end

  def dl
    api_run("services/cloud_dl|list_task")
  end

  def da(url)
    api_run("services/cloud_dl|add_task",
            source_url: url,
            save_path: @pwd )
  end

  private

  def files
    @files.fetch(@pwd, nil)
  end

  def api_run(method, *opts, **kwds)
    @res = @api.run(method, *opts, **kwds)
  end

  # find path relative to "to" address
  def relative_path(path = @pwd, to = APP_ROOT_DIR)
    Pathname.new(path).relative_path_from(Pathname.new(to)).to_s
  end

  # find a full path
  #   path:       a relative path or full path
  #   reference:  reference location, i.e., pwd
  def absolute_path(path, reference = @pwd)
    path = File.expand_path(File.join(reference, path))  unless path.start_with? '/'
    path
  end

  def on_success
    unless @res[:error_code]
      yield
    else
      puts "Error: [#{@res[:error_code]}] #{@res[:error_msg]}"
    end
  end

end

# This class defines CLI interactions
class BaiduYunCLI < BaiduYun
  def initialize
    super
    @stty_save = `stty -g`.chomp
    #trap("INT") {system('stty', @stty_save); exit}   # trap ^C and gracefully exit
    trap("INT", 'SIG_IGN')    # trap ^C and return back to loop

    @comp = proc {|s|
      # complete command if there is no command entered
      unless Readline.line_buffer =~ /^(.*?) /
        cli_commands.grep(/^#{Regexp.escape(s)}/i)
      else
        case $1
        when /^(cp|mv|get|rm)/
          files.map(&:first).grep(/^#{Regexp.escape(s)}/i)  if files
        when /^cd/
          files.select(&:last).map(&:first).grep(/^#{Regexp.escape(s)}/i) if files
        end
      end
    }
  end

  def main_loop
    load_history
    Readline.completion_proc = @comp
    while @line = Readline.readline(prompt, true)
      case @line.strip
      when /^([^ ]+)(?:\s+([^ ].*))?$/i;
        if methods.include? $1.to_sym
          $2 ? send($1, *(Shellwords.split($2))) : send($1)
        else
          puts "Invalid Command"
        end
      else; puts "Invalid Command"
      end

      # remove empty or dupicated commands
      save_history
    end
  rescue Interrupt
    puts "Interrupted... quitting"
    quit
  end

  def quit
    system('stty', @stty_save); exit
  end

  def help
    puts <<-HELP
    help          显示本帮助
    auto_server   自动选择最快的服务器
    cd            更改服务器目录
    cp OLD NEW    在服务器复制文件
    debug on      打开debug显示
    da URL        添加离线下载
    dl            查看离线下载列表
    find FILE     递归在当前目录查找文件
    get FILE      下载单个文件
    history       历史命令
    lcd           切换本地目录
    ls [DIR]      列出文件列表
    mget PATTERN  批量下载(单线程)
    pwd           当前目录
    quota         容量使用信息
    rm FILE...    删除文件
    server        显示当前使用的服务器
    servers       显示可以使用的服务器列表
    quit          退出
    HELP
  end

  def ls(path = nil)
    super; on_success{  format_list_output(@res)  }
  end

  def lcd(path)
    super; puts "Local working directory changed to: #{@lpwd}"
  end

  def pwd
    puts "REMOTE: " + @pwd
    puts "LOCAL:  " + @lpwd
  end

  def quota
    super
    on_success do
      puts "QUOTA:  #{format_size @res[:quota] }"
      puts "USED:   #{format_size @res[:used] }"
    end
  end

  def cp(from, to)
    super
    on_success do
      @res[:extra][:list].each { |i| puts "COPY: " +  i[:from] + "  =>  " + i[:to] }
    end
  end

  def get(path)
    super
    # on_success could not be used here because there is no return code
    puts "Download completed: #{path}"
  end

  # here the batch delete API is used for speed
  def rm(*path)
    super; on_success{ nil }
  end

  def find(wd, path = '.')
    super; on_success{ format_list_output(@res) }
  end

  def history
    puts Readline::HISTORY.to_a.last(10).join("\n")
  end

  def server; puts super.host; end

  def servers
    super
    on_success{ @res[:server].each{|s| puts s == @res[:host] ? s + "\t(fastest)" : s } }
  end

  def auto_server
    # an ugly way to call a super method that is overridden
    super_method(:servers).call
    on_success{ @api.server @res[:host] }
  end

  private

  def cli_commands
    return @commands  if @commands
    @commands = [BaiduYun, BaiduYunCLI].
      map{|i| i.instance_methods(false)}.inject(&:+).map(&:to_s).sort.uniq
    @commands.delete('main_loop')
    @commands.delete_if{|i| i.start_with? '_' }
    @commands
  end

  def super_method(method)
    BaiduYun.instance_method(method).bind(self)
  end

  def save_history
    if @line =~ /^\s*$/ or Readline::HISTORY.to_a[-2] == @line
      Readline::HISTORY.pop
    else
      open(SESSION_LOG, 'a+') {|f| f.puts @line }
    end
  end

  def load_history
    Readline::HISTORY.push(* open(SESSION_LOG).readlines.map(&:chomp).uniq )   if File.file? SESSION_LOG
  end

  def prompt
    "BaiduYun".color("34;47") + ' ' + @pwd.color('32;1')  +' > '
  end

  def format_list_output(res)
    res[:list].each do |f|
      str = [:fs_id, :size, :mtime].map{|k| format_field(k, f[k]) }.join("  ")
      str << "  " << format_path(f[:path], f[:isdir])
      puts str
    end
  end

  def format_field(field, record);
    send("format_#{field}", record)
  end

  def format_fs_id(record); "%16s" % record; end

  def format_mtime(record)
    t = Time.at(record)
    '['.color('33') + t.strftime("%Y-%m-%d").color('32') + ' ' +
      t.strftime("%H:%M:%S").color('35') + "]".color('33')
  end

  def format_size(size)
    s = case size
        when  0..1024;               size.to_s
        when  1024..1024000;         "%.2f" % (size/1E3) + 'K'
        when  1024000..1024000000;   "%.2f" % (size/1E6) + 'M'
        else;                        "%.2f" % (size/1E9) + 'G'
        end
    "%8s" % s
  end

  def format_path(record, isdir = 0)
    path = relative_path(record, @pwd)
    isdir == 0 ? path : path.color('34;1;4')
  end
end

class String
  def color(code)
    "\e[#{code}m" + self + "\e[m"
  end
end

if __FILE__ == $0
  cli = BaiduYunCLI.new
  cli.main_loop
end
